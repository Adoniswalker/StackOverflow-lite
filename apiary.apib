FORMAT: 1A
HOST: https://stackoverflow-paul.herokuapp.com/api/v1

# Stackoverflow-lite

Stackoverflow lite is a simple API allowing users to view post questions, answers and vote for them. You can view this documentation over at [Apiary](https://stackoverflowlite2.docs.apiary.io).
## Sign up Collection [/auth/signup]


### Users: Create user [POST]
You may create your own account using this action. 
It takes a JSON object containing a user email, password and username as profile and authorization details.

+ useraname (required, string) - User name
+ email (required, string) - A valid user email
+ password (required, string) - Strong login password

+ Request (application/json)

        {
                "email": "sky@Jhames.com",
                "password": "sdsdfsdf9s0d9fs09sf",
                "username": "sky"
        }


+ Response 201 (application/json)

        {
            "auth_token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE1Mzc3MDAwMTIsInN1YiI6bnVsbCwiaWF0IjoxNTM1MDIxNDgyfQ.Bu-tAvsHe1pzARSEwLm4RWIiaHW_LP1LBIvfiDoeowQ",
            "id": 47,
            "message": "Successfully registered.",
            "status": "success"
        }

+ Response 401 (application/json)

        {
            "errors": {
                "user_exist": "User already exists. Please Log in."
            },
            "status": "fail"
        }

## Login [/auth/login]


### User: Login [POST]
This action allows you to login and and get a JWT authorization token.
+ email: (required, string) - User email
+ password: (required, string) - User password


+ Request (application/json)

        {
                "email": "sky@Jhames.com",
                "password": "sdsdfsdf9s0d9fs09sf",
                "username": "sky"
        }


+ Response 200 (application/json)

        {
            "auth_token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE1Mzc2OTgxMDYsInN1YiI6MTQsImlhdCI6MTUzNTAxOTU3Nn0.zIy4KGCaIlHvBMbDmP0BCIHmrn43bN3O-PyiI1ZviY8",
            "id": 14,
            "message": "Successfully logged in.",
            "status": "success"
        }
        
+ Response 404 (application/json)

        {
            "message": "User does not exist.",
            "status": "fail"
        }

## Users Collection [/auth/users]

### List users [GET]
This resource will list all users.

+ Response 201 (application/json)

        {
          "results": [
            {
              "created_at": "Mon, 20 Aug 2018 06:39:39 GMT",
              "email": "sky@Jhames.com",
              "user_id": 14,
              "username": "sky"
            }
          ],
          "status": "success"
        }

## User get collection [/auth/users/{user_id}]


### Retrieve single user [GET]
This action allows you to retreive user details.
+ Parameters
    + user_id: 1 (required, number) - ID of user you want details displayed
    

+ Response 201 (application/json)

        {
            "results": [
                {
                    "created_at": "Sun, 19 Aug 2018 18:20:08 GMT",
                    "email": "joshua@j.com",
                    "user_id": 12,
                    "username": "p8ul"
                }
            ],
            "status": "success"
        }

+ Response 404 (application/json)

        {
            "results": "User not found",
            "status": "fail"
        }

## Question: Create Question [/questions/]


### Question: Create Question [POST]
You may create your own question using this action. It takes a JSON object containing a question title and body.

+ title (string) - The question title
+ body (string) - Question description body

+ Request (application/json)
        
        {
                "title": "What was your question title",
                "body": "What was your question body What was your question body"
                
        }

+ Response 201 (application/json)

## Question: Update question [/questions/1]


### Question: Update question [PUT]
User can update a question using this action. It takes a JSON object containing a question title and body.

+ title (string) - The question title
+ body (string) - Question description body

+ Response 201 (application/json)



## Answers: Retrieve an answer [/questions/answers/{answer_id}]

### Answers: Retrieve an answer [GET]
This action allows you to retreive a single answer details.
+ Parameters
    + answer_id: 1 (required, number) - ID of answer you to display

+ Response 201 (application/json)


## Votes: Upvote/Downvote [/questions/answers/vote/{answer_id}]


### Votes: Upvote/Downvote [POST]
A Vote object has the following attributes:

+ user_id: - Voters user id
+ created_at - An ISO8601 date when the question was published.
+ vote - Boolean: True to upvote / False to down vote

+ Parameters
    + answer_id: 1 (required, number) - ID of the answer in form of an integer


+ Request (application/json)

        {
                "vote": "true"
        }


+ Response 201 (application/json)


## Answers: Post an answer [/questions/{question_id}/answers]


### Answers: Post an answer [POST]
This action will allow you to post an answer to the specified question

A Question object has the following attributes:

+ answer_body - Answer descriptive body

+ Parameters
    + question_id: 1 (required, number) - ID of the Question in form of an integer


+ Request (application/json)

            {
                    "answer_body": "I lovehjhh JKJK"
            }


+ Response 201 (application/json)


## Answer: List all answers [/questions/answers]


### Answer: List all answers [GET]
You may ist all answers using this action.

+ Response 201 (application/json)


## Answer:  Update answer [/questions/{question_id}/answers/{answer_id}]


### Answer:  Update answer [PUT]
This action will Update an answer
+ Parameters
    + answer_id: 1 (required, number) - ID of the answer in form of an integer


+ Response 201 (application/json)


## Comments collection [/questions/answers/comment/{answer_id}]


### Comments:  Create a comment [POST]

A Comment object has the following attributes:

+ user_id: - Commenting user id
+ created_at - An ISO8601 date when the question was published.
+ comment_body - String: Comment description
+ Parameters
    + answer_id: 1 (required, number) - ID of the answer in form of an integer


+ Request (application/json)

+ Response 201 (application/json)